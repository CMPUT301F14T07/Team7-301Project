*** MVC Basics ***
Here are the basics of MVC.

** View **
This class contains what is displayed to the user.
It implements the observer interface which forces it to have an
update function. This update function is where all the code goes that
changes what the user sees. For example, if there is a text element
in the XML file, then the update function is where this text element
will have its text changed.
When any calculations need to be done a controller must do this.

** Controller **
This class does all the calculations and is called from a view. After
doing calculations it updates the model and tells the model its data
has changed. 

** Model **
This class extends the Observable class which contains an ArrayList
of all the views this model has. It also contains all the data that its
views need. When its notifyObservers function is called it will
go through each of the views it has and call their update function.



*** Class Descriptions ***
Description of what each class does and what its methods do.

** Observable **
Contains an array list of views (activity classes). 
* addObserver(Activity) : void
	Adds an activity class to the array list.
* deleteObserver(Activity) : void
	Removes the activity Activity from the array list.
* notifyObservers() : void
	Goes through each activity class in its array list and calls their
	update functions.

** AuthorModel (extends Observable) **
This is a model of who the author is. It saves who the author is in memory.
* setSessionAuthor(String author)
  	Saves the String author in memory.
* getSessionAuthor() : String
  	Returns a String of what author is saved in memory.
* All methods from Observable

** Reply, Entry, and ForumEntry **
These are models, they represent what a forum entry, its entries, and replys
look like. We have discussed these a lot so I won't explain them again.

** ForumEntryList (extends Observable) **
This is a model all the forum entries. It contains an array list of 
forum entries and several memory management functions to save and load
forum entries of different headings. It also contains a JsonDriver
to push forum entries to a remote server.
* setView(ArrayList<ForumEntry>) : void
  	Sets an array list of forum entries. This is the list of forum entries
	used when the views update functions are called. 
* setMyAuthored(ArrayList<ForumEntry>) : void
  	Saves the array list of ForumEntries in memory under a location
	which indicates these forum entries are "authored by me".
* setReadLater(ArrayList<ForumEntry>) : void
  	Saves the array list of ForumEntries in memory under a location which
	indicates these forum entries are "read later" entries.
* setFavourites(ArrayList<ForumEntry>) : void
  	Saves the array list of ForumEntries in memory under a location which
	indicates these forum entries are "favourite" entries.
* setRemote(ArrayList<ForumEntry>) : bool
  	Uses the JsonDriver to save the array list of ForumEntries to a 
	remote server. Returns true on success, false on failure.
* setRemoteById(int id, ForumEntry) : bool
  	Sets the ForumEntry in the remote repo with id to be the ForumEntry
	given as an argument. Uses the JsonDriver to do this. Returns true
	on success, false on failure.
* appendtoRemote(ForumEntry) : bool
  	Uses the JsonDriver to append the ForumEntry to what is in the
	remote server. Returns true on success, false on failure.
* getView() : ArrayList<ForumEntry>
  	Returns the array list of forum entries set in the setView function.
* getMyAuthored() : ArrayList<ForumEntry>
  	Returns the array list of forum entries which were saved as "authored by me".
* getReadLater() : ArrayList<ForumEntry>
  	Returns the array list of ForumEntries which were saved in a location
	that marked them as "read later".
* getFavourites() : ArrayList<ForumEntry> 
  	Returns the array list of ForumEntries which were saved in a location
	that marked them as "favourite".
* getRemote(String searchType, String searchTerm, String sort) : ArrayList<ForumEntry>
  	Returns the array list of ForumEntries which were saved to a remote
	server. The JsonDriver is used to do this using the String searchType and
	searchTerm, and the String sort as a sorting term. Returns null
	if there is no connection.
* getRemoteById(int id) : ForumEntry
  	Gets the ForumEntry from the remote server that has the id given. The
	JsonDriver is used to do this. Returns null if there is no connection.
* all methods from observable

** JsonDriver **
This class is an interface to the remote server.
* setRemote(ArrayList<ForumEntry>) : bool
  	Sets the data in the remote server to be the provided array list
	of forum entries. Returns true on success, false on failure.
* setRemoteById(int id, ForumEntry) : bool
  	Sets the ForumEntry in the remote repo with id to be the ForumEntry
	given as an argument. Returns true on success, false on failure.
* appendToRemote(ForumEntry) : bool
  	Appends the ForumEntry to what is in the remote server. 
	Returns true on success, false on failure.
* getRemote(String searchType, String searchTerm, String sort) : ArrayList<ForumEntry>
  	Gets from the remote server an array list of ForumEntries sorted
	according to the String sort and containing only the ForumEntries
	which fall under the String searchTerm and searchType. Returns null on failure
* getRemoteById(int id) : ForumEntry
  	Gets from the remote server a ForumEntry which has the id provided.
	Returns null on failure.

** OrganizationModel **
This class contains information on search and sort stuff. It knows what was searched for,
how forum entries are sorted, and what search type was used. Its functions are getters
and setters.

** AuthorController **
This class has an AuthorModel instance.
* Constructor - AuthorController(Context) : void
  	Creates a new AuthorModel and then calls the author models
	addObserver fuction with the Context given.
* setSessionAuthor(String author) : void
  	This function sets the author in the AuthorModel it has to be String
	author.
* refresh() : void
  	Calls the models notifyObservers() function so that the model 
	calls all of the views update functions.

** ForumEntryController **
This class has a ForumEntryList instance. This is the model the controller
knows about.
* Constructor - ForumEntryController(Context) : void
  	Creates a new ForumEntryList and then calls the ForumEntryList's 
	addObserver function with the Context given
* setView(int id) : void
  	The id is the id of a ForumEntry. This will use the model's 
	getRemoteById() function to get the ForumEntry that matches this
	id. 
	getRemoteById() returns a ForumEntry:
		It will use the model's setView() function with that
		ForumEntry to set the data and then the model's notifyObservers()
		function so that the view's update functions are called.
		In addition, per user story 17, the models getReadLater and
		setReadLater functions will be used to append this to the read later
		cache.
	getRemoteById() returns null:
		This means there is no connectivity. Use the getReadLater() function
		to see if this forum entry has been cached. If it has then use the
		setView() function to set this forum entry in the model and then the
		notifyObservers() function so the model calls the view's update function.
* addEntry(Entry) : void
  	Calls the model's getView function. If this returns null it will call the 
	addNewQuestion function, otherwise it calls the addAnswer function.
* addAnswer(Entry) : void
  	Uses the models getView function to get the forum entry and
	then gets that forum entries id. Then calls the models
	getRemoteById function with that id to get an up to date
	ForumEntry. 
	getRemoteById returns a ForumEntry:
		It will then append the Entry to the to forum
		entry. Next, it will call the setRemoteById to save these
		changes to the remote server and then use the getReadLater, getMyAuthored
		and setReadLater setMyAuthored functions to cache. Finally, it will put 
		the id of the forum entry into and intent and start the QuestionActivity.
	getRemoteById returns null:
		It will use the forum entry returned by getView - it will add the
		answer to the forum entry then use the setReadLater, setMyAuthored
		and getReadLater, getMyAuthored functions to cache the change.
		A thread will be started which continually calls the getRemoteById
		until a ForumEntry returns. When a forum entry is returned it will 
		add the the new Entry to that forum entry then use the setRemoteByID
		function to save the changes to the remote server. It will also use the
		getReadLater, getMyAuthored, setReadLater, and setMyAuthored functions
		to re-cache the forum entry. After the thread has started executing it
		will put the id into an intent then start the QuestionActivity.
* addNewQuestion(Entry) : void
  	Creates a new ForumEntry then uses the model's getReadLater, getMyAuthored and 
	setReadLater setMyAuthored functions to cache. Next, it uses the model's
	appendToRemote() function to add this new question to the remote server. 
	appendToRemote() returns true:
		It puts	the id of the new forum entry into an intent and the starts the
		QuestionActivity.
	appendToRemote() returns false:
		It will start a thread which will call the appendToRemote function
		until it returns true. After the thread has been started it will
		put the id of the new forum entry into an intent and then start
		the QuestionActivity.	
* saveFavouritesCopy() : void
  	Uses the models getFavourites and getView functions to get all the
	"favourites" forum entries and the forum entry to be saved as
	"favourites". Appends the forum entry, then calls the models
	saveFavourites function to save it.
* upVoteEntry(int location) : void
  	Uses the models getView function to get the forum entry and then
	gets that forum entries id. Then calls the models getRemoteById 
	function with that id to get an up to date version.
	getRemoteById() returns a ForumEntry:
		It will then index the forum entry with the location argument 
		and upvote the entry. Then it will use the getReadLater() and
		setReadLater() functions of the model to cache the new change.
		Then it will call setRemoteById, setView, 
		and finally notifyObservers so that the views update function is
		called.
	getRemoteById() returns null:
		It will use the forum entry returned by getView - it will up vote
		the correct entry then use the setReadLater and getReadLater
		functions to cache the change.
		A thread will be started which continually calls the getRemoteById
		until a ForumEntry returns. When a forum entry is returned it will 
		up vote the correct entry then use the setRemoteByID
		function to save the changes to the remote server. It will also use the
		getReadLater and setReadLater functions to re-cache the forum entry.
* addReplyToEntry(int location, String reply) : void
  	This follows the same procedure as the upVoteEntry function of this controller
	except a reply is being added to an Entry, instead of upvoting the Entry.
* checkPictureSize(int location) : void
  	Uses the models getView function to get the forum entry and then
	gets that forum entries id. It will then index that forum entry with 
	the location argument given and check the size of the picture attached 
	to that Entry.
* sortForumEntryByVotes() : void
  	Uses the models getView function to get the forum entry then sort it by
	up votes of the entries. Next call the, setView, and notifyObservers function.
* startEntryActivityToAnswer() : void
  	Uses the models getView function to get the forum entry and then
	gets the forum entries id. It will package this id into an intent
	and then start the EntryActivity.

** BrowseController **
This class has a ForumEntryList instance and an OrganizationModel instance.
These are the models the controller knows about.
* Constructor - BrowseController(Context) : void
  	Creates a new ForumEntryList and then calls the ForumEntryList's 
	addObserver function with the Context given.
* sortByTime() : void
  	Calls the OrganizationModel's getters to see what type of search was done
	then calls the getRemote() function with that search term, but uses the
	sort by time sort type. It will then set the sort type in the organization
	model to be that sort type.
	getRemote() returns an ArrayList<ForumEntry>:
		    Uses the setView function with the new array list then calls
		    the notifyObservers function.
	getRemote() returns null:
		    Uses the getView function to get an ArrayList<ForumEntry> then
		    manually sorts it and uses the setView function to set the new
		    sorted list and then calls the notifyObservers function so
		    that the view's update functions are called.
* sortByRating() : void
  	Same procedure as sortByTime() except sorts by rating.
* sortByHasPicture() : void
  	Same procedure as sortByTime() except sorts by has picture.
* sortBySearchTerm(String term) : void
  	Same procedure as sortByTime() except changes the search term.
* useOnLineView() : void
  	Same procedure as sortByTime except doesn't change any of the sort/search terms.
* useReadLaterView() : void
  	Calls the model's get getReadLater() function to get an array list of forum
	entries, then passes those to the model's setView() function. Finally,
	it calls the models notifyObservers() function.
* useFavouritesView() : void
  	Same procedure as useReadLaterView() except calls getFavourites() instead of
	getReadLater().
* useMyAuthoredView() : void
  	Calls the model's getMyAuthored() then sets the return array list of forum
	entries using the model's setView() function, finally, calls the model's
	notifyObservers function to update the view. Note: all of the forum entries
	may not be up to date with the server. This is probably ok unless the view
	needs to know how many answer it has and stuff like that. If this is the case,
	this function will have to synchronize what is saved with setMyAuthored with
	what is in the remote server.
* startQuestionActivity(int id) : void
  	This function will take the id of a ForumEntry and put it in an intent. Then it
	start the QuestionActivity with that intent.

** MainScreenActivity **
This class has an instance of the AuthorController.
* signInButton() : void
	Extracts text from some text box where the user entered their name. Then calls
	controllers setSessionAuthor() function to save authors name.
* askButton() : void
	Calls the startEntryActivity() function
* browseButton() : void
	Calls the startBrowseActivityWithView() function. The string provided as input
	matches a menu option choice. ie. if the user has selected the "my authored"
	view from the menu options, then this should passed as an argument.
* searchButton() : void
	Calls the startBrowseActivity() function. The string passed to the function
	matches what the user entered to search for.
* startEntryActivity() : void
  	Puts a null int into an intent then starts the EntryActivity.
* startBrowseActivityWithView(String view) : void
  	Puts 
  	
  	
  	




*** How To Use UML-v3 ***
This text file explains how to read and implement the UML-v2 for each of
the use cases

** u1 **
Call function MainScreenActivity.startBrowseActivity("*");
This function can use an intent to start the browse activity.
The argument "*" is a wild term (ie search for everything).
BrowseActivity starts and extracts the intents message then
makes use of the function call
BrowseController.sortBySearchTerm("*").
	This function can then use the MemoryDriver by
	MemoryDriver.getRemote("*"). This can use the JsonDriver
	to search the remote server with the search term "*".
	An ArrayList<ForumEntry> will be returned to the controller.
	Then using ForumEntryList.setForumEntryList() function
	it can update the model, then notify the model of data 
	set change with ForumEntryList.notifyObservers(). This
	will cause the model to call the browseActivities
	update function, BrowseActivity.update(ForumEntryList).
BrowseActivity's update function then sets what data the
activity shows.

** u2 **
Same as u1.

** u3 **
Call function BrowseActivity.startQuestionActivity(). This can use an
intent to add the ForumEntry of the selected question, then start the 
question activity. When the question activity starts it can extract
that ForumEntry and display it.

** u4 **
This is a function of how we use the Android API.

** u5 **
Same as u4.

** u6 **
Call function MainScreenActivity.startEntryActivity(). This can use
an intent to start the EntryActivity. The entry activity can call the
controllers AuthorController.refresh() function to auto fill the
author field. The refresh() function can just call the models 
AuthorModel.notifyObservers() function so that the EntryActivities
update funciton is called.
When the activities information gathering fields are filled out and
the user hits the submit/ask/w/e button then the EntryActivity can
call the ForumEntryController.addNewQuestion(Entry). This can
end up  calling the MemoryDriver.setRemote() function to add this
to the Json server.

** u7 **
Same as u6, but Android API will handle getting a picture from the
user to attach to the Entry.

** u8 **
Same as u6 except the MemoryDriver.setRemote function can
detect there is no internet connection and call the 
thread_pushForumEntryToRemote function to do the work later. This
function should create a thread with enough information to do the
work and exit when the network connection is restored.

** u9 **
The question activity can call the startEntryActivity Function. The
same procedure as u6 will be followed except instead of calling the
addNewQuestion() function the addAnswer function can be  called. To 
differentiate between posting a new question or answering a question
the intent can send information about that.

** u10 **
Same as u9, but Android API will handle getting a picture from the
user.

** u11 **
Same procedure as u9 followed by u8.

** u12 **
In the QuestionActivity the Android API will handle getting the
data from user about a reply. The ForumEntryController.addReplyToEntry
function will use the MemoryDriver to push the changes to the remote server.

** u13 **
Same procedure as u12 followed by u8.

** u14 **
Same procedure as u12.

** u15 **
Same procedure as u13.

** u16 **
The browse activity calls the BrowseController.sortByHasPicture(). 
Lexie, lets talk about how you're doing this so UML and code
are consistant.

** u17 **
Same as u16 but call BrowseController.sortByDate()

** u18 **
Same as u16 but call BrowseController.sortByRating()

** u19 **
In the QuestionActivity, call the ForumEntryController.upVoteEntry().
this will then follow the same procedure as u12.

** u20 **
Same procedure as u19

** u21 **
This comes from user story 13. This is a very difficult use case to implement
properly if the forum entry is sorted on demand. The easiest, and least MVC
way to do this is have a sort() method inside the activity class. The easiest
MVC way is to have the ForumEntryController always sort forum entries when
ever the addEntry function is called. This way the forum entry is always
sorted by votes.

** u22 **
This functionality will have to be included in BrowseActivities update method.

** u23 **
Same as u1, except the search term is not "*" but the term the user is
searching for.

** u24 **
Same as u23.

** u25 **
I am not sure what this means. Does this mean that the questions the user
asks are always saved locally? Or more simply, the questions the user asks
have their name on them?

** u26 **
Call the ForumEntryController.saveReadLaterCopy() function which will
use the MemoryDriver to save this forum entry locally.

** u27 **
This can be done by calling the MainScreenActivities startBrowseActivityWithView
function. This function will use use an intent to package the string provided
as input and start the browse activity. The browse activity can unpackage
the intent to find the information and call the controllers sortBy funcitons
to show the read later view. The sort by functions will use the memory driver
to get the appropriate array list of forum entries and then set this in the
model. The model will then be told to call the activities update function
which will update the view.

** u28 **
Sane as u26 except call saveFavouritesCopy().

** u29 **
Same as u27.

** u30 **
This will be done automatically by the
MemoryDriver.thread_pushForumEntryToRemote() function which spawns a
thread to do all the work.

** u31 **
Use the AuthorController.setSessionAuthor function which will set the
author in the model. The model will save who the author is locally.

** u32 **
Same as u27.

